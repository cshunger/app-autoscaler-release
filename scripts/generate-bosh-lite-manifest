#!/bin/bash

set -e

root_dir=$(cd "$(dirname "$0")/.." && pwd)
templates_dir=${root_dir}/templates

usage() {
  >&2 cat <<EOF
SYNOPSIS:
    Generate a bosh-lite manifest for an Autoscaler deployment to accompany an existing CF deployment.
USAGE:
    $0 <MANDATORY ARGUMENTS> [OPTIONAL ARGUMENTS]
MANDATORY ARGUMENTS:
    -r <cf-property-overrides>  Path to cf-property-overrides file.
    -p <property-path>          Path to property-overrides stub file.
    -cp <cf-merge-property-overrides> Path to prunning extra data from the cf merge

OPTIONAL ARGUMENTS:
    -d <db-stub-path>           Path to database stub file.
    -v <bosh-manifest-version>  v1 or v2(default).
EXAMPLE:
    $0 \\
      -c ../cf-release/bosh-lite/deployments/cf.yml \\
      -p ./example/property-overrides.yml \\
      -d ./example/dbstubs/db-stub-external.yml \\
EOF
  exit 1
}

manifest_version="v1"

while getopts "p:r:d:v:" opt ; do
  case "$opt" in
    p)
        property_overrides=$OPTARG
        ;;
    r)
        cf_property_overrides=$OPTARG
        ;;
    d)
        db_settings=$OPTARG
        ;;
    v)
        manifest_version=$OPTARG
        ;;
    *)  echo "Unknown arguments"
        usage
        ;;
  esac
done

if [ -z ${property_overrides} ]; then
  >&2 echo "ERROR: Property-overrides stub file is missing"
  argument_error=true

else
  if [ ! -f "${property_overrides}" ]; then
    >&2 echo "ERROR: Property-overrides stub '${property_overrides}' is not a regular file"
    argument_error=true
  fi
fi

if [ -z ${cf_property_overrides} ]; then
  >&2 echo "ERROR: Cloud Foundry prunning overrides stub file is missing"
  argument_error=true

else
  if [ ! -f "${cf_property_overrides}" ]; then
    >&2 echo "ERROR: Cloud Foundry prunning overrides stub '${cf_property_overrides}' is not a regular file"
    argument_error=true
  fi
fi

if [[ ! -z "${db_settings}" && ! -f "${db_settings}" ]]; then
  >&2 echo "ERROR: Database Setting stub '${db_settings}' is not a regular file"
  argument_error=true
fi
if [[ "${manifest_version}" == "v1" || "${manifest_version}" == "V1" ]]; then
   template_file="bosh-lite-manifest-template-v1.yml"
   echo "Generating BOSH V1 manifest using " ${template_file} "as manifest template"
else
  >&2 echo "ERROR: Invalid bosh manifest version '${manifest_version}'"
  argument_error=true
fi

if [ ! -z $argument_error ]; then
  echo
  usage
fi

tmpdir=$(mktemp -d /tmp/autoscaler-bosh-lite-manifest.XXXXX)
CLOUDFOUNDRY_DIR="/data/CloudFoundry/"
spruce merge \
  ${templates_dir}/config-from-cf.yml \
  "${CLOUDFOUNDRY_DIR}/cf-deploy.yml" \
  ${cf_property_overrides} \
  > ${tmpdir}/config-from-cf-merged.yml

mkdir -p ${root_dir}/bosh/deployments

spruce merge \
${templates_dir}/${template_file} \
${property_overrides} \
${db_settings} \
"${CLOUDFOUNDRY_DIR}/bmxconfig.yml" \
"${CLOUDFOUNDRY_DIR}/credentials.yml" \
${tmpdir}/config-from-cf-merged.yml  \
> ${root_dir}/bosh/deployments/autoscaler.yml
